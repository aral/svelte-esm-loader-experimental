/* generated by Svelte v3.41.0 */
import {
	SvelteComponent,
	append_hydration,
	append_styles,
	attr,
	children,
	claim_component,
	claim_element,
	claim_space,
	claim_text,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert_hydration,
	mount_component,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} from "/modules/svelte/internal";

import Inner from './Inner.js';

function add_css(target) {
	append_styles(target, "svelte-1tb9iu1", "h1.svelte-1tb9iu1{color:red}");
}

function create_fragment(ctx) {
	let h1;
	let t0;
	let t1;
	let t2;
	let t3;
	let p;
	let t4;
	let t5;
	let t6;
	let inner;
	let current;
	inner = new Inner({});

	return {
		c() {
			h1 = element("h1");
			t0 = text("Hello ");
			t1 = text(/*name*/ ctx[0]);
			t2 = text("!");
			t3 = space();
			p = element("p");
			t4 = text("Data: ");
			t5 = text(/*data*/ ctx[1]);
			t6 = space();
			create_component(inner.$$.fragment);
			this.h();
		},
		l(nodes) {
			h1 = claim_element(nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, "Hello ");
			t1 = claim_text(h1_nodes, /*name*/ ctx[0]);
			t2 = claim_text(h1_nodes, "!");
			h1_nodes.forEach(detach);
			t3 = claim_space(nodes);
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t4 = claim_text(p_nodes, "Data: ");
			t5 = claim_text(p_nodes, /*data*/ ctx[1]);
			p_nodes.forEach(detach);
			t6 = claim_space(nodes);
			claim_component(inner.$$.fragment, nodes);
			this.h();
		},
		h() {
			attr(h1, "class", "svelte-1tb9iu1");
		},
		m(target, anchor) {
			insert_hydration(target, h1, anchor);
			append_hydration(h1, t0);
			append_hydration(h1, t1);
			append_hydration(h1, t2);
			insert_hydration(target, t3, anchor);
			insert_hydration(target, p, anchor);
			append_hydration(p, t4);
			append_hydration(p, t5);
			insert_hydration(target, t6, anchor);
			mount_component(inner, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*name*/ 1) set_data(t1, /*name*/ ctx[0]);
			if (!current || dirty & /*data*/ 2) set_data(t5, /*data*/ ctx[1]);
		},
		i(local) {
			if (current) return;
			transition_in(inner.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(inner.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(h1);
			if (detaching) detach(t3);
			if (detaching) detach(p);
			if (detaching) detach(t6);
			destroy_component(inner, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { name } = $$props;
	let data = ["this", "could", "be", "from", "a", "database"];

	setTimeout(
		() => {
			$$invalidate(1, data = ["and, this, is, an, update"]);
		},
		2000
	);

	$$self.$$set = $$props => {
		if ('name' in $$props) $$invalidate(0, name = $$props.name);
	};

	return [name, data];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { name: 0 }, add_css);
	}
}

export default Component;